#/*Snapshot Reporting*/

#The script is to find out the EBS Snapshots created in a time period, write those details in a file, upload the file to a AWS S3 bucket and email the file as attachment via a custom SMTP.

#There is minimial hard coding in the script i.e. time period (days value), email related values viz. sender, recipent/s, SMTP.

from datetime import datetime, timedelta, timezone

import boto3
import os
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from botocore.exceptions import ClientError

# Import smtplib for the actual email sending.
import smtplib    

# Import the email modules for email sending.
from email import encoders

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    
    #iam = boto3.resource('iam')
    
    #The AWS account ID number of the account that owns or contains the calling entity.
    account_id = boto3.client('sts').get_caller_identity()['Account']

#Code to filter the snapshot/s created in the time period -

    # Calculate the age of the snapshot as per the creation datetime and the time period value in days.
    snapshot_age = datetime.now(tz=timezone.utc) - timedelta(days=30)
    
    # Get resources from the default session for EC2 service.
    ec2 = boto3.resource('ec2')
    
    #Filter the Snapshots to the respective AWS account that owns the EBS snapshot/s.
    snapshots = ec2.snapshots.filter(OwnerIds=['self'])

    #Define variable for the count of the snapshot/s.
    snapshotcreationcount=0
    
    #Define a list for the snapshot/s created which stores the essential details of the snapshot/s.
    snapshotcreationdetails=['SnapshotId','Description','SnapshotCreationTime','Volume','Tags']
    snapshotcreationdetails.append('\n')
    
    #Run the filered snapshots through a loop to check for snapshot/s created in the date limit.
    for snapshot in snapshots:
        if (snapshot_age < snapshot.start_time):
            print (snapshot.snapshot_id + " " + snapshot.description + " " + str(snapshot.start_time))
            
            #Append the details of those snapshot/s in the list.
            snapshotcreationdetails.append(snapshot.snapshot_id);snapshotcreationdetails.append(snapshot.description);snapshotcreationdetails.append(snapshot.start_time);snapshotcreationdetails.append(snapshot.volume_id);snapshotcreationdetails.append(snapshot.tags);snapshotcreationdetails.append('|\n')

            #Increment the counter whenever such filtered snapshot is encountered.
            snapshotcreationcount=snapshotcreationcount+1

    print("Snapshots created in last 30 days: ",snapshotcreationcount)
    #print(snapshotcreationdetails)
	
    #As per the count of the snapshots created, add the count/output in the list.
    if (snapshotcreationcount == 0):
        print ("No EBS Snapshots created in last 30 days.")
        snapshotcreationdetails.append('No EBS Snapshots created in last 30 days.')
    else:
        snapshotcreationdetails.append('Snapshots created in last 30 days: %d|' %snapshotcreationcount)

#Code to write the snapshots creation data to a file and upload to a AWS S3 bucket -

    #Define the format of file name storing the data of the snapshots created.
    file_name = 'ebssnapshotcreationreport' + str(datetime.now()) + ".txt"
    
    #Change directory to /tmp folder - AWS Lambda storage where the file generated is stored.
    os.chdir('/tmp')    

    #The file is opened with the open() method in a mode within the with block, the a argument will append text to an existing text file. The with block ensures that once the entire block is executed the file is closed automatically.
    # open file
    with open(file_name, 'a') as f:
  
    # write elements of list
        for items in snapshotcreationdetails:
            f.write('%s|' % items)

    # close the file
    f.close()

    # Get resources from the default session from S3 service.
    s3 = boto3.resource('s3')
       
    #Define the format of the AWS S3 Bucket name storing the file object.
    bucket_name = "{}".format(account_id) + '-aws' + '-snapshot-' + 'reports'
    
    #Upload the file to the AWS S3 Bucket
    s3.Bucket(bucket_name).upload_file(file_name,file_name)
    
    #Define the HTTP Response for file upload to S3 bucket.
    #return {
    #    'statusCode': 200,
    #    'body': f"Upload succeeded: File - {file_name} has been uploaded to Amazon S3 Bucket # {bucket_name}"
    #}

#Code to send email -
    
    # Create a multipart/mixed parent container.
    msg = MIMEMultipart()
    
    #The email body for recipients with non-HTML email clients.
    emailbody = "The attached report contains the data of the EBS snapshot(s) created in the last 30 days.\n\n\n\n\n Disclaimer: This email is for informational purposes only; in case of any queries, please reach out to the respective team."
    
    # Add subject, from and to lines.
    msg['Subject'] = 'AWS Cloud / EBS snapshots / Creation / Report'
    msg['From'] = 'x@domain.com'
    msg['To'] = 'y@domain.com'

    #Define the attachment part and encode it using MIMEApplication.
    attachment = MIMEApplication(open(file_name, 'rb').read())
    
    #Add a header to tell the email client to treat this part as an attachment.
    attachment.add_header('Content-Disposition', 'attachment', filename=file_name)
    
    #Add the attachment to the parent container.
    msg.attach(attachment)

    #Try to send the email.    
    try:    
        # Send the message via own SMTP server.
        mailserver = smtplib.SMTP('x.x.x.x') #SMTP = Host name/IPv4 Address.
        mailserver.send_message(msg)    
        mailserver.quit()
        print("Successfully sent email!")    
		
	#Print error if something goes wrong.	
    except Exception as e:
        print("Error: " + str(e))

    #Define the HTTP Response for email sent.
    return {
        'statusCode': 200,
        'body': f"Successfully sent email from Lambda using SMTP."
    }        
