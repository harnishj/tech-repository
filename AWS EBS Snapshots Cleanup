#/*Cleanup EBS Snapshot/s*/

#The script is to delete the EBS Snapshots aged 90 days from the date of creation or whose 'RetentionDate' tag value matches current date and which are not created as per the official Service Management process, write those details in a file, put the file to a AWS S3 bucket and email the file as attachment via a custom SMTP.
	
#There is minimial hard coding in the script i.e. snapshot age (days value=90), email related values viz. sender, recipent/s, SMTP.

from datetime import datetime, timedelta, timezone
import dateutil.parser as dparser
import boto3
import logging

# Import smtplib for the actual email sending.
import smtplib    

# Import the email modules for email sending.
from email.message import EmailMessage

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    
    #iam = boto3.resource('iam')
    
    #The AWS account ID number of the account that owns or contains the calling entity.
    account_id = boto3.client('sts').get_caller_identity()['Account']

    # Calculate the snapshot age date as per the snapshot cutoff days value.
    snapshotage = datetime.now(tz=timezone.utc) - timedelta(days=30)

    # Get resources from the default session from EC2 service
    ec2_resource = boto3.resource('ec2')
    
    #Filter the Snapshots to the respective AWS account that owns the EBS snapshot/s.
    snapshots = ec2_resource.snapshots.filter(OwnerIds=['self'])
    
    #Define variable for the count of the snapshot/s.
    snapshotdeletioncount=0
    
    #Define a list for the snapshot/s created which stores the essential details of the snapshot/s.
    snapshotdeletiondetails=['SnapshotId','Description','SnapshotCreationTime','Volume','Tags']
    snapshotdeletiondetails.append('\n')

    #Run the filered snapshots through loops to check for snapshot/s to be deleted as per criteria.
    for snapshot in snapshots:
        
        #Define a boolean variable  for the counter of snapshots deleted.
        snapshotdeletedcounter = 0
        
        #Define a boolean variable for the Tag-key='RetentionDate' on snapshots.
        RetentionTag = 0
        
        #Check snapshots which do not have any Tags.
        if not snapshot.tags:
            
            #Check snapshots through a loop to check for snapshot/s which have crossed their age and which are not as per the description (snapshot.description) criteria set i.e "chg" or "ritm" or "cpm" or "ctask" or "createimage" as these strings in snapshot description signify that those snapshot/s are as per the process or part of an AMI and not ad-hoc.
            if (snapshotage < snapshot.start_time) and (("chg" in snapshot.description.lower()) or ("ritm" in snapshot.description.lower()) or ("cpm" in snapshot.description.lower()) or ("ctask" in snapshot.description.lower()) or ("createimage" in snapshot.description.lower())):

                print (snapshot.snapshot_id + " " + snapshot.description + " " + str(snapshot.start_time))
                    
                #Append the details of respective filtered aged snapshots in the list.                
                snapshotdeletiondetails.append(snapshot.snapshot_id);snapshotdeletiondetails.append(snapshot.description);snapshotdeletiondetails.append(snapshot.start_time);snapshotdeletiondetails.append(snapshot.volume_id);snapshotdeletiondetails.append(snapshot.tags);snapshotdeletiondetails.append('|\n')
                
                #Delete the aged snapshots.
                #snapshot.delete(DryRun=False)
                
                #Set the flag to True for boolean variable for the counter of snapshots deleted.
                snapshotdeletedcounter = 1
                    
                #Increment the count of snapshots deleted.
                snapshotdeletioncount=snapshotdeletioncount+1
            
                print('Snapshot with Id = {} is deleted '.format(snapshot.snapshot_id))
                
        #Check snapshots which have Tags.                
        elif snapshot.tags and (snapshotdeletedcounter == 0):
  
            #Loop through the length of the Tags on the snapshot.
            for i in range(len(snapshot.tags)):
               
                #Check for Tag-key='RetentionDate' on snapshots.
                if snapshot.tags[i]['Key'] == 'RetentionDate':
                    
                    #Set the flag to True for boolean variable for the Tag-key='RetentionDate' on snapshots.
                    RetentionTag = 1
                    
                    #Parse the value of the Tag='RetentionDate' for a numerical (days) value.
                    snapshotdate=dparser.parse(snapshot.tags[i]['Value'],fuzzy=True)
                    
                    #print ("The days value of the 'RetentionDate is' + snapshotdate)
                    
                    #Filter the snapshot/s whose RetentionDate has expired or expires today and snapshot/s which are not as per the description (snapshot.description) criteria set i.e "chg" or "ritm" or "cpm" or "ctask" or "createimage" as these strings in snapshot description signify that those snapshot/s are as per the process or part of an AMI and not ad-hoc.
                    if (((snapshotdate - datetime.today()).days) <= 0) and (("chg" in snapshot.description.lower()) or ("ritm" in snapshot.description.lower()) or ("cpm" in snapshot.description.lower()) or ("ctask" in snapshot.description.lower()) or ("createimage" in snapshot.description.lower())):
                        
                        print (snapshot.snapshot_id + " " + snapshot.description + " " + str(snapshot.start_time))
                    
                        #Append the details of respective filtered aged snapshots in the list.                        
                        snapshotdeletiondetails.append(snapshot.snapshot_id);snapshotdeletiondetails.append(snapshot.description);snapshotdeletiondetails.append(snapshot.start_time);snapshotdeletiondetails.append(snapshot.volume_id);snapshotdeletiondetails.append(snapshot.tags);snapshotdeletiondetails.append('|\n')
                      
                        #Delete those snapshots whose RetentionDate has expired today.
                        #snapshot.delete(DryRun=False)
                        
                        #Set the flag to True for boolean variable for the counter of snapshots deleted.
                        snapshotdeletedcounter = 1
                        
                        #Increment the count of snapshots deleted.
                        snapshotdeletioncount=snapshotdeletioncount+1
                      
                        print('Snapshot with Id = {} is deleted '.format(snapshot.snapshot_id))
                        
                        break
                        
            if (RetentionTag == 0) and (snapshotdeletedcounter == 0) :
                    
                #Check snapshots through a loop to check for snapshot/s which have Tag/s but not the 'RetentionDate' tag  but have crossed their age and snapshot/s which are not as per the description (snapshot.description) criteria set i.e "chg" or "ritm" or "cpm" or "ctask" or "createimage" as these strings in snapshot description signify that those snapshot/s are as per the process or part of an AMI and not ad-hoc.
                if (snapshotage < snapshot.start_time) and (("chg" in snapshot.description.lower()) or ("ritm" in snapshot.description.lower()) or ("cpm" in snapshot.description.lower()) or ("ctask" in snapshot.description.lower()) or ("createimage" in snapshot.description.lower())):
                            
                    print (snapshot.snapshot_id + " " + snapshot.description + " " + str(snapshot.start_time))
                        
                    #Append the details of respective filtered aged snapshots in the list.                    
                    snapshotdeletiondetails.append(snapshot.snapshot_id);snapshotdeletiondetails.append(snapshot.description);snapshotdeletiondetails.append(snapshot.start_time);snapshotdeletiondetails.append(snapshot.volume_id);snapshotdeletiondetails.append(snapshot.tags);snapshotdeletiondetails.append('|\n')
                    
                    #Delete the aged snapshots.
                    #snapshot.delete(DryRun=False)
                    
                    #Increment the count of snapshots deleted.
                    snapshotdeletioncount=snapshotdeletioncount+1
                    
                    print('Snapshot with Id = {} is deleted '.format(snapshot.snapshot_id))

    print("Total Deleted Snapshots: ",snapshotdeletioncount)
    #print(snapshotdeletiondetails)
        
    if (snapshotdeletioncount == 0):
        snapshotdeletiondetails.append("No EBS Snapshots deleted.")    
    else:
        snapshotdeletiondetails.append('Snapshots deleted: %d|' %snapshotdeletioncount)

    #Join the details of the list in a variable.
    snapshotsdeleted = '|'.join(map(str, snapshotdeletiondetails))

#Code to write the snapshots deletion data to a file and put to a AWS S3 bucket -

    # Get resources from the default session from S3 service.
    s3 = boto3.resource('s3')
        
    #Define the format of the file name which stores the details of the snapshots deleted.
    file_name = 'ebssnapshotdeletion' + str(datetime.now()) + ".txt"
    
    #Define the name of the AWS S3 Bucket storing the file object.
	bucket_name = "{}".format(account_id) + '-aws' + '-snapshot-' + 'reports'
    
    #Create a S3 object variable for the bucket and file.
    object = s3.Object(bucket_name,file_name)
    
    #Put the list in the object body i.e. file which is going to be stored in the S3 bucket.
    result = object.put(Body=snapshotsdeleted)
    
    #Define the HTTP Response for file upload to S3 bucket.
    #return {
    #    'statusCode': 200,
    #    'body': f"Upload succeeded: File - {file_name} has been uploaded to Amazon S3 Bucket # {bucket_name}"
    #}

#Code to send email -
    
    # Create a text/plain message    
    msg = EmailMessage()
    
    #The email body for recipients with non-HTML email clients.
    msg.set_content("The following EBS Snapshot/s was deleted through automation with the details as follows: \n\nAWS Account# {}\n{} \n\n\n\n\n Disclaimer: This email is for informational purposes only; in case of any queries, please reach out to the respective team.".format(account_id, snapshotsdeleted))

    # Add subject, from and to lines.
    msg['Subject'] = 'AWS Cloud / EBS snapshots / Cleanup / Notification.'
    msg['From'] = 'x@domain.com'
    msg['To'] = 'y@domain.com'

    #Try to send the email.    
    try:    
        # Send the message via own SMTP server.
        mailserver = smtplib.SMTP('192.198.230.24') #SMTP = Host name/IPv4 Address.
        mailserver.send_message(msg)    
        mailserver.quit()
        print("Successfully sent email")    
		
	#Print error if something goes wrong.	
    except Exception as e:
        print("Error - " + str(e))

    #Define the HTTP Response for email sent.
    return {
        'statusCode': 200,
        'body': f"Successfully sent email from Lambda using SMTP."
    }       
